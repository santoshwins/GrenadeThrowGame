#ifndef __GAMECONTRLS_H_
#define __GAMECONTRLS_H_

#include <QtGui/QMainWindow>
#include "GameLogic.h"


/// @file GameLogic.h
/// @author Santosh Krishnan
/// @version 1.0
/// @date 28/2/13
/// @class GameControls
/// @brief GameControls class to capture inputs and pass it through to next level of classes for processing
/// and to update all the UI elements according to the specific state of the game by quering the GameLogic
/// class


namespace Ui {
    class GameControls;
}
//----------------------------------------------------------------------------------------------------------------------
/// @brief This is the MainWindow Class which is generated by the Ui file, if we wish to add anything to the main
/// Ui we add it here
//----------------------------------------------------------------------------------------------------------------------
class GameControls : public QMainWindow
{
Q_OBJECT


public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor basically we create a GameLogic and parent it to
    /// this window so our GameLogic is the main canvas
    //----------------------------------------------------------------------------------------------------------------------
    GameControls(QWidget *parent = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~GameControls();


protected :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief override the keyPressEvent inherited from QObject so we can handle key presses.
    /// @param [in] _event the event to process
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(
                       QKeyEvent *_event
                      );


    void keyReleaseEvent(
                         QKeyEvent *_event
                        );



private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our gl window created in GameLogic.h
    //----------------------------------------------------------------------------------------------------------------------
    GameLogic *m_gl;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our ui namespace
    //----------------------------------------------------------------------------------------------------------------------
    Ui::GameControls *m_ui;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer to set after the game starts running, used to hide loading page
    //----------------------------------------------------------------------------------------------------------------------
    int m_gameRunning;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer to set wind speed
    //----------------------------------------------------------------------------------------------------------------------
    int m_settingWind;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer to update the score after querying the GameLogic class
    //----------------------------------------------------------------------------------------------------------------------
    int m_updateScore;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief to signal if the start button is clicked
    //----------------------------------------------------------------------------------------------------------------------
    int isStartButtonClicked;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief color style sheets to change the ui poer bars and score bars based on the current score
    //----------------------------------------------------------------------------------------------------------------------
    QString ColorHigh,ColorIntermediate,ColorLow;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief gif animations to display wind arrow marks
    //----------------------------------------------------------------------------------------------------------------------
    QMovie *movieLeft,*movieRight;


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timerEvent to process the elapsed timers
    /// @param [in] _event the timer event to process
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(
                   QTimerEvent *_event
                   );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the power bar to reflect the power applied to the grenade
    /// @param [in] _inputPower to be set
    //----------------------------------------------------------------------------------------------------------------------
    void setPowerBar(float);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the progress bar to reflect the loading progress
    //----------------------------------------------------------------------------------------------------------------------
    void setProgressBar();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the wind value got from gamelogic to reflect on the ui
    //----------------------------------------------------------------------------------------------------------------------
    void setRandomValueForWindLevel3();


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the current score
    //----------------------------------------------------------------------------------------------------------------------
    float getCurrentScore();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief construct the gl(GameLogic) window
    //----------------------------------------------------------------------------------------------------------------------
    void constructTheGame();




private slots:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief start game slot
    //----------------------------------------------------------------------------------------------------------------------
    void startGame();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reset game slot
    //----------------------------------------------------------------------------------------------------------------------
    void resetGame();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief difficulty beginner radio
    //----------------------------------------------------------------------------------------------------------------------
    void setBeginnerDifficulty();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief difficulty advanced radio
    //----------------------------------------------------------------------------------------------------------------------
    void setAdvancedDifficulty();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief level number display
    //----------------------------------------------------------------------------------------------------------------------
    void setLevelDisplay(int _levelDisplay);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief to set the current selected camera
    //----------------------------------------------------------------------------------------------------------------------
    void setCameraFromUI();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief to detach the camera
    //----------------------------------------------------------------------------------------------------------------------
    void setFreeCamFlagFromUI(int);


};

#endif // __GAMECONTRLS_H
