#ifndef __GAMELEVEL_H_
#define __GAMELEVEL_H_

#include "GameModel.h"
#include "GamePhysicsEngine.h"


typedef enum
{
    BEGINNER,
    ADVANCED
}DIFFICULTY_LEVELS;

typedef enum
{
    LEVEL1 = 1,
    LEVEL2,
    LEVEL3
}GAME_LEVELS;


typedef enum
{
    DIRECTION_ARROW,
    BOUNDARY_WALL_LEFT,
    BOUNDARY_WALL_RIGHT,
    BOUNDARY_WALL_BACK
}GRAPHIC_IMGS;



/// @file GameLevel.h
/// @author Santosh Krishnan
/// @version 1.0
/// @date 28/2/13
/// @class GameLevel
/// @brief GameLevel class handles various things related to the level of the game world from creating the level/all the mesh data and models,loading the corresponsing
/// transform stack and also interacts with the physics engine to add/retrieve the collision boxes to/from our models.

class GameLevel
{

    // copy constructor and = to be done

public:

    GameLevel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor to create GameLevel
    //----------------------------------------------------------------------------------------------------------------------
    GameLevel(GameDrawEngine* _inputDrawEngine,GamePhysicsEngine *_inputPhysicsEngine,int _inputScreenHeight = 1024, int _inputScreenWidth = 780);
    ~GameLevel();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add the grenade mesh to level
    //----------------------------------------------------------------------------------------------------------------------
    void addPlayerToLevel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add the obstacle mesh to level
    //----------------------------------------------------------------------------------------------------------------------
    void addObstaclesToLevel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add the cratebox mesh to level
    //----------------------------------------------------------------------------------------------------------------------
    void addCrateBoxToLevel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add the sky and grass mesh to level
    //----------------------------------------------------------------------------------------------------------------------
    void addBGToLevel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add the bullet collision boxes for all models
    //----------------------------------------------------------------------------------------------------------------------
    void addCollisionBoxes();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the level
    //----------------------------------------------------------------------------------------------------------------------
    void drawLevel();


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the level camera
    /// @param [in] _cam camera input
     //----------------------------------------------------------------------------------------------------------------------
    void setLevelCam(ngl::Camera* _cam);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates the specified model
    /// @param [in] _difficulty difficulty level
    //----------------------------------------------------------------------------------------------------------------------
    void setLevelDifficulty(DIFFICULTY_LEVELS _difficulty);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get reference to player
    //----------------------------------------------------------------------------------------------------------------------
    GameModel* getPlayer();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the level number
    //----------------------------------------------------------------------------------------------------------------------
    GAME_LEVELS getLevelNumber();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the level number
     /// @param [in] _inputLevelNumber input level number
    //----------------------------------------------------------------------------------------------------------------------
    void setLevelNumber(GAME_LEVELS _inputLevelNumber);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief move models randomly for level 3
    //----------------------------------------------------------------------------------------------------------------------
    void simulateAI();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief move grenade oveloaded function to include wind factor
    //----------------------------------------------------------------------------------------------------------------------
    void moveGrenade();
    void moveGrenade(int);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief move obstacles
    //----------------------------------------------------------------------------------------------------------------------
    void moveObstacles();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the arrow direction arrow draw flag
    /// @param [in] _inputKey
    //----------------------------------------------------------------------------------------------------------------------
    void setArrowDrawFlag(int _inputKey);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief keep accumulating direction
    /// @param [in] _inputdir new direction
    //----------------------------------------------------------------------------------------------------------------------
    void accumulateDirection(int _inputdir);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief keep accumulating acceleration
    /// @param [in] _inputAcceleration new direction
    //----------------------------------------------------------------------------------------------------------------------
    void accumulateAcceleration(int _inputAcceleration);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add graphic images such as the bounding bunkers and the direction arrows
    //----------------------------------------------------------------------------------------------------------------------
    void addGraphicImages();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get accumulated direction
    //----------------------------------------------------------------------------------------------------------------------
    float getAccumulatedDirection();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the free cam flag
    //----------------------------------------------------------------------------------------------------------------------
    void setFreeCamFlag(int _inputFreeCamFlag );

protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief model repository with enum key
    //----------------------------------------------------------------------------------------------------------------------
    std::map <int,GameModel *> m_modelRepos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief graphic image repository with enum key
    //----------------------------------------------------------------------------------------------------------------------
    std::map <int, GameModel*> m_graphicRepos;


private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief screen ht
    //----------------------------------------------------------------------------------------------------------------------
    int _screenHeight;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief screen wdth
    //----------------------------------------------------------------------------------------------------------------------
    int _screenWidth;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief _total number of obstacles
    //----------------------------------------------------------------------------------------------------------------------
    int _numberOfObstacles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enum difficulty levels
    //----------------------------------------------------------------------------------------------------------------------
    DIFFICULTY_LEVELS m_difficulty;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current level number
    //----------------------------------------------------------------------------------------------------------------------
    GAME_LEVELS m_levelNumber;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief player pointer
    //----------------------------------------------------------------------------------------------------------------------
    GameModel *_player;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief drawing engine
    //----------------------------------------------------------------------------------------------------------------------
    GameDrawEngine *_drawEngine;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief model repository with enum key
    //----------------------------------------------------------------------------------------------------------------------
    GamePhysicsEngine *_physicsEngine;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transform stack of the corresponding model
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to check whether to draw the arrow/ not drawn during simulation
    //----------------------------------------------------------------------------------------------------------------------
    int arrowDraw;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief total accumulated direction from the user keypress
    //----------------------------------------------------------------------------------------------------------------------
    int accumulatedDirection;
    //----------------------------------------------------------------------------------------------------------------------
     /// @brief total accumulated acceleration from the user keypress
    //----------------------------------------------------------------------------------------------------------------------
    int accumulatedAcceleration;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to check if free cam is enabled/disabled
    //----------------------------------------------------------------------------------------------------------------------
    int m_freeCamFlag;


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load the models which does not have anything to do with bullet using its own transform stack
    /// @param [in] _transformStack transform of the current model
    /// @param [in] _pos input position
    /// @param [in] _rot rotation
    /// @param [in] _scale scale
    //----------------------------------------------------------------------------------------------------------------------
    void loadModelsWithoutBulletTransformations(ngl::TransformStack _transformStack, const ngl::Vec3& _pos,const ngl::Vec4& _rot, const ngl::Vec4& _scale);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw module to draw all the extras such as graphic images and anti bullet objs
    //----------------------------------------------------------------------------------------------------------------------
    void drawExtras();

};



#endif // __GAMELEVEL_H_

