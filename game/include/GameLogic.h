#ifndef __GameLogic_H_
#define __GameLogic_H_

#include <iostream>
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/SpotLight.h>
#include <ngl/TransformStack.h>
#include <ngl/Transformation.h>
#include <ngl/Obj.h>
#include <ngl/Material.h>
#include <ngl/NGLInit.h>
#include <ngl/ShaderLib.h>
#include <ngl/Util.h>
#include<ngl/Text.h>

#include "GameModel.h"
#include "GamePlayer.h"
#include "GameObstacles.h"
#include "GameDrawEngine.h"
#include "GameLevel.h"

// must be included after our stuff becuase GLEW needs to be first
#include <QtOpenGL>

class GamePhysicsEngine;


/// @file GameLogic.h
/// @author Santosh Krishnan
/// @version 1.0
/// @date 28/2/13
/// @class GameLogic
/// @brief GameLogic class handles all the logical things such as processing the keys recieved from GameControls, the main game logic of reduction of score,
/// contact with physics engine to query status and the important GL functions of initialize,paint and resize functions. This acts as the hub
/// between Physics engine and the controls classes.Inherits QGLWidget.

class GameLogic : public QGLWidget
{
    //future use if slots/signals comes up
    Q_OBJECT

    // copy constructor and = to be done

    public :
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief Constructor for GLWindow
        /// @param [in] parent the parent window to create the GL context in
        //----------------------------------------------------------------------------------------------------------------------
        GameLogic(
                   QWidget *_parent
                 );
         //----------------------------------------------------------------------------------------------------------------------
         /// @brief dtor add any code here to tidy up
         //----------------------------------------------------------------------------------------------------------------------
        ~GameLogic();
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief processKeyDown passed from the main window class
        /// @param *_event a pointer to the QKeyEvent passed from main window
        /// class
        //----------------------------------------------------------------------------------------------------------------------
        void processKeyDown(
                              QKeyEvent *_event
                           );
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief processKeyUp passed from the main window class
        /// @param *_event a pointer to the QKeyEvent passed from main window
        /// class
        //----------------------------------------------------------------------------------------------------------------------
        void processKeyUp(
                              QKeyEvent *_event
                         );

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief set the current difficulty
        /// @param _difficulty difficulty level from ui
        //----------------------------------------------------------------------------------------------------------------------
        void setDifficulty(DIFFICULTY_LEVELS _difficulty);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief set the currnt level from ui
        /// @param _inputLevel the current level
        //----------------------------------------------------------------------------------------------------------------------
        void setLevel(int _inputLevel);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief change the camera
        /// @param _camName cam name
        //----------------------------------------------------------------------------------------------------------------------
        void changeCamera(CAMERA_NAMES _camName);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets the flag to check if the game is started or not
        //----------------------------------------------------------------------------------------------------------------------
        int getGameStartedFlag();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets the flag to check if the game is in simulation( in air )
        //----------------------------------------------------------------------------------------------------------------------
        bool getSimulationFlag();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief sets the wind value
        /// @param _inputWindValue to set
        //----------------------------------------------------------------------------------------------------------------------
        void setWindValue(int _inputWindValue);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets the grande life
        //----------------------------------------------------------------------------------------------------------------------
        float getCurrentGrenadeLife();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets the game won flag when queried
        //----------------------------------------------------------------------------------------------------------------------
        bool getGameWonFlag();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief set detach camera flag
        //----------------------------------------------------------------------------------------------------------------------
        void setFreeCamFlag(int _inputFreeCamFlag );

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief sets game lost flag from ui score check
        //----------------------------------------------------------------------------------------------------------------------
        void setGameLostFlag();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets the game lost flag to display appropriate message to usr
        //----------------------------------------------------------------------------------------------------------------------
        bool getGameLostFlag();


    protected:

      //----------------------------------------------------------------------------------------------------------------------
      /// @brief  The following methods must be implimented in the sub class
      /// this is called when the window is created
      //----------------------------------------------------------------------------------------------------------------------
      void initializeGL();

      //----------------------------------------------------------------------------------------------------------------------
      /// @brief this is called whenever the window is re-sized
      /// @param[in] _w the width of the resized window
      /// @param[in] _h the height of the resized window
      //----------------------------------------------------------------------------------------------------------------------
      void resizeGL(
                    const int _w,
                    const int _h
                   );
      //----------------------------------------------------------------------------------------------------------------------
      /// @brief this is the main gl drawing routine which is called whenever the window needs to
      /// be re-drawn
      //----------------------------------------------------------------------------------------------------------------------
      void paintGL();

    private:

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a timer triggered by the startTimer call in the ctor this is called
        /// to update the player position based on the key presses
        //----------------------------------------------------------------------------------------------------------------------
        int m_updateGrenadeTimer;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a timer triggered by the startTimer call in the ctor this is called
        /// to redraw the level
        //----------------------------------------------------------------------------------------------------------------------
        int m_redrawTimer;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a timer triggered by the startTimer call in the ctor this is called
        /// to mark the loading progress
        //----------------------------------------------------------------------------------------------------------------------
        int progressTimer;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief all cameras
        //----------------------------------------------------------------------------------------------------------------------
        ngl::Camera *m_cam,*m_cam1,*m_cam2,*m_cam3;


        //----------------------------------------------------------------------------------------------------------------------
        /// @brief pointer to player
        //----------------------------------------------------------------------------------------------------------------------
        GameModel *m_grenade;

        /// @brief the keys being pressed
        QSet<Qt::Key> m_keysPressed;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief drawengine ptr
        //----------------------------------------------------------------------------------------------------------------------
        GameDrawEngine *drawEngine;
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief physics world ptr
        //----------------------------------------------------------------------------------------------------------------------
        GamePhysicsEngine *physicsWorld;
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief level pointer
        //----------------------------------------------------------------------------------------------------------------------
        GameLevel *level;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief enum difficulty level
        //----------------------------------------------------------------------------------------------------------------------
        DIFFICULTY_LEVELS difficulty;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief level number
        //----------------------------------------------------------------------------------------------------------------------
        GAME_LEVELS m_levelNumber;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief game started flag
        //----------------------------------------------------------------------------------------------------------------------
        int gameStarted;


        //----------------------------------------------------------------------------------------------------------------------
        /// @brief wind value from ui
        //----------------------------------------------------------------------------------------------------------------------
        int windValue;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief win/lost text pointer
        //----------------------------------------------------------------------------------------------------------------------
        ngl::Text *m_text;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief game lost flag
        //----------------------------------------------------------------------------------------------------------------------
        bool lostFlag;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the timer event triggered from the timers
        /// @param _even the event of the timer triggered by Qt
        //----------------------------------------------------------------------------------------------------------------------
        void timerEvent(
                       QTimerEvent *_event
                      );


};

#endif // __GameLogic_H_

