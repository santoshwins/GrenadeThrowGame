#ifndef __GAMEDRAWENGINE_H_
#define __GAMEDRAWENGINE_H_
#include <ngl/Vec3.h>

#include <ngl/Camera.h>
#include <ngl/ShaderLib.h>
#include <ngl/TransformStack.h>
#include "GamePhysicsEngine.h"

class GameModel;

typedef enum
{
    CAM_DEFAULT,
    CAM_LEFT,
    CAM_TOP,
    CAM_RIGHT
}CAMERA_NAMES;


/// @file GameDrawEngine.h
/// @author Santosh Krishnan
/// @version 1.0
/// @date 28/2/13
/// @class GameDrawEngine
/// @brief GameDrawEngine class handles the actual drawing of all the mesh/data passed into it in addition to handling setting the active camera

class GameDrawEngine
{

    // copy constructor and = to be done

    public:


        //----------------------------------------------------------------------------------------------------------------------
        /// @brief active camera
        //----------------------------------------------------------------------------------------------------------------------
        CAMERA_NAMES _activeCam;

        GameDrawEngine();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief ctor to create the drawengine
        //----------------------------------------------------------------------------------------------------------------------
        GameDrawEngine(int,int);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief dtor to create the ammunition box to be placed at the end of the level
        //----------------------------------------------------------------------------------------------------------------------
        ~GameDrawEngine();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief creates the specified model
        /// @param [in] _modelIndex the index of the current model
        /// @param [in] GameModel* pointer to the current gamemodel
        //----------------------------------------------------------------------------------------------------------------------
        bool createModel(int _modelIndex,GameModel*);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief draws the models mesh
        /// @param [in] GameModel* pointer to the current gamemodel
        //----------------------------------------------------------------------------------------------------------------------
        void drawModels(GameModel *_inputModel);


        //----------------------------------------------------------------------------------------------------------------------
        /// @brief adds cameras to a repository
        /// @param [in] _name name of the cam
        /// @param [in] *_cam input camera
        //----------------------------------------------------------------------------------------------------------------------
        void addCamToRepos(CAMERA_NAMES _name, ngl::Camera *_cam);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief adds cameras to a repository
        /// @param [in] _name name of the cam
        //----------------------------------------------------------------------------------------------------------------------
        void setActiveCam(CAMERA_NAMES _camName);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief adds cameras to a repository
        /// @param [in] _inputScreenHeight window height
        //----------------------------------------------------------------------------------------------------------------------
        void setScreenHeight(float _inputScreenHeight);


        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets screen ht
        //----------------------------------------------------------------------------------------------------------------------
        float getScreenHeight();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief adds cameras to a repository
        /// @param [in] _inputScreenWidth window wdth
        //----------------------------------------------------------------------------------------------------------------------
        void setScreenWidth(float _inputScreenWidth);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets screen wdth
        //----------------------------------------------------------------------------------------------------------------------
        float getScreenWidth();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets active cam
        //----------------------------------------------------------------------------------------------------------------------
        ngl::Camera* getActiveCam();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief gets a specific cam
        /// @param [in] _inputCameraName camera name
        //----------------------------------------------------------------------------------------------------------------------
        ngl::Camera* getSpecificCam(CAMERA_NAMES _inputCameraName);

   protected:
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief screen ht
        //----------------------------------------------------------------------------------------------------------------------
        int screenHeight;
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief screen wdth
        //----------------------------------------------------------------------------------------------------------------------
        int screenWidth;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief camera repository with enum name as key
        //----------------------------------------------------------------------------------------------------------------------
        std::map <int,ngl::Camera *> m_camRepos;

};

#endif // __GAMEDRAWENGINE_H_
